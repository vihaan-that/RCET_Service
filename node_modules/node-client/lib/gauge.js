/**
 * Created by hetiu on 2017/6/13.
 */
const prom = require('prom-client');
const monitor = require('./monitor');

module.exports = (name, labelNames = []) => new Gauge(name, labelNames);

class Gauge {
    /**
     * Gauge
     * @param {string} name - Name of the metric
     * @param {Array.<string>} labelNames - Array with strings, all label keywords supported
     */
    constructor(name, labelNames) {
        if (monitor.isEnable) {
            this.metric = prom.register.getSingleMetric(name) ||
                new prom.Gauge({
                    name,
                    labelNames,
                    help: 'nothing',
                });
        }
    }

    /**
     * Set a gauge to a value
     * @param {object} labels - Object with labels and their values
     * @param {Number} value - Value to set the gauge to, must be positive
     * @param {(Number|Date)} timestamp - Timestamp to set the gauge to
     * @returns {void}
     */
    set(labels, value, timestamp) {
        if (monitor.isEnable) {
            this.metric.set(labels, value, timestamp);
        }
    }

    /**
     * Increment a gauge value
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @param {Number} value - Value to increment - if omitted, increment with 1
     * @param {(Number|Date)} timestamp - Timestamp to set the gauge to
     * @returns {void}
     */
    inc(labels, value, timestamp) {
        if (monitor.isEnable) {
            this.metric.inc(labels, value, timestamp);
        }
    }

    /**
     * Decrement a gauge value
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @param {Number} value - Value to decrement - if omitted, decrement with 1
     * @param {(Number|Date)} timestamp - Timestamp to set the gauge to
     * @returns {void}
     */
    dec(labels, value, timestamp) {
        if (monitor.isEnable) {
            this.metric.dec(labels, value, timestamp);
        }
    }

    /**
     * Set the gauge to current unix epoch
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @returns {void}
     */
    setToCurrentTime(labels) {
        if (monitor.isEnable) {
            this.metric.setToCurrentTime(labels);
        }
    }

    /**
     * Start a timer
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @returns {function} - Invoke this function to set the duration in seconds since you started the timer.
     * @example
     * var done = gauge.startTimer();
     * makeXHRRequest(function(err, response) {
     *      done(); //Duration of the request will be saved
     * });
     */
    startTimer(labels) {
        if (monitor.isEnable) {
            return this.metric.startTimer(labels);
        } else {
            return function () {};
        }
    }
}
