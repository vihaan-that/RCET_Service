/**
 * Created by hetiu on 2017/6/13.
 */
const prom = require('prom-client');
const monitor = require('./monitor');

module.exports = (name, labelNames = [], buckets = [0.1, 0.5, 1, 2.5, 5]) => new Histogram(name, labelNames, buckets);

class Histogram {
    /**
     * Histogram
     * @param {string} name - Name of the metric
     * @param {Array.<string>} labelNames - Array with strings, all label keywords supported
     * @param {Array.<number>} Buckets used in the histogram
     */
    constructor(name, labelNames, buckets) {
        if (monitor.isEnable) {
            this.metric = prom.register.getSingleMetric(name) ||
                new prom.Histogram({
                    name,
                    labelNames,
                    buckets,
                    help: 'nothing',
                });
        }
    }

    /**
     * Observe a value
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @param {Number} value - Value to observe
     * @returns {void}
     */
    observe(labels, value) {
        if (monitor.isEnable) {
            this.metric.observe(labels, value);
        }
    }

    /**
     * Start a timer that could be used to logging durations
     * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep
     * @returns {function} - Function to invoke when you want to stop the timer and observe the duration in seconds
     * @example
     * var end = histogram.startTimer();
     * makeExpensiveXHRRequest(function(err, res) {
     *      end(); //Observe the duration of expensiveXHRRequest
     * });
     */
    startTimer(labels) {
        if (monitor.isEnable) {
            return this.metric.startTimer(labels);
        } else {
            return function () {};
        }
    }
}
